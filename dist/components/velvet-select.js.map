{"version":3,"file":"velvet-select.js","sources":["../../src/components/velvet-select.gts"],"sourcesContent":["import { template as template_4480c4afe4a64960be72c2b160a374a9 } from \"@ember/template-compiler\";\nimport { concat, hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport Component from '@glimmer/component';\nimport type { WithBoundArgs } from '@glint/template';\nimport { or } from 'ember-truth-helpers';\nimport { cn } from '../-private/helpers/cn.ts';\nimport VelvetSelectOption from './velvet-select/option.gts';\nexport interface VelvetSelectSignature {\n    Args: {\n        /// Indicate if the select is disabled.\n        /// @default [false]\n        isDisabled?: boolean;\n        /// Indicate if the select is invalid.\n        /// @default [false]\n        isInvalid?: boolean;\n        /// Indicate if the select is pill shaped.\n        /// @default [false]\n        isPill?: boolean;\n        /// Handle the select's `change` event.\n        /// @default [undefined]\n        onChange?: (selected: unknown, event: Event) => void;\n        /// The placeholder of the select.\n        /// @default [\"\"]\n        placeholder?: string;\n        /// The selected option of the select.\n        /// @default [undefined]\n        selected?: unknown;\n        /// The size of the select.\n        /// @default [\"md\"]\n        size?: 'sm' | 'md' | 'lg';\n        /// The appearance of the select.\n        /// @default [\"primary\"]\n        variant?: string | 'primary';\n    };\n    Blocks: {\n        /// The options of the select.\n        default: [{\n                Option: WithBoundArgs<typeof VelvetSelectOption, 'privateOnCreate' | 'privateOnDestroy' | 'privateSelected'>;\n            }];\n    };\n    Element: HTMLSelectElement;\n}\nexport default class VelvetSelect extends Component<VelvetSelectSignature> {\n    options = new Map();\n    get hasSelection() {\n        return this.args.selected !== undefined && this.args.selected !== null;\n    }\n    get shouldRenderPlaceholder() {\n        return Boolean(this.args.placeholder) && this.hasSelection === false;\n    }\n    changeHandler = (event: Event)=>{\n        const { isDisabled, onChange } = this.args;\n        if (typeof onChange !== 'function' || isDisabled === true) {\n            return;\n        }\n        onChange(this.options.get((event.target as HTMLSelectElement).value), event);\n    };\n    addOption = (id: string, value: unknown)=>{\n        this.options.set(id, value);\n    };\n    removeOption = (id: string)=>{\n        this.options.delete(id);\n    };\n    static{\n        template_4480c4afe4a64960be72c2b160a374a9(`\n    <select\n      class={{cn\n        \"velvet-select\"\n        (concat \"velvet-select-\" (or @size \"md\"))\n        (concat \"velvet-select-\" (or @variant \"primary\"))\n        (if @isInvalid \"velvet-select-invalid\")\n        (if @isPill \"velvet-select-pill\")\n        (if @isDisabled \"velvet-select-disabled\")\n        (if this.shouldRenderPlaceholder \"velvet-select-placeholder\")\n        \"form-select\"\n      }}\n      disabled={{@isDisabled}}\n      {{on \"change\" this.changeHandler}}\n      ...attributes\n    >\n      {{#if this.shouldRenderPlaceholder}}\n        <option disabled selected={{true}}>\n          {{@placeholder}}\n        </option>\n      {{/if}}\n      {{yield\n        (hash\n          Option=(component\n            VelvetSelectOption\n            privateOnCreate=this.addOption\n            privateOnDestroy=this.removeOption\n            privateSelected=@selected\n          )\n        )\n      }}\n    </select>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3NyYy9jb21wb25lbnRzL3ZlbHZldC1zZWxlY3QuZ3RzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmNhdCwgaGFzaCB9IGZyb20gJ0BlbWJlci9oZWxwZXInO1xuaW1wb3J0IHsgb24gfSBmcm9tICdAZW1iZXIvbW9kaWZpZXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICdAZ2xpbW1lci9jb21wb25lbnQnO1xuaW1wb3J0IHR5cGUgeyBXaXRoQm91bmRBcmdzIH0gZnJvbSAnQGdsaW50L3RlbXBsYXRlJztcbmltcG9ydCB7IG9yIH0gZnJvbSAnZW1iZXItdHJ1dGgtaGVscGVycyc7XG5pbXBvcnQgeyBjbiB9IGZyb20gJy4uLy1wcml2YXRlL2hlbHBlcnMvY24udHMnO1xuaW1wb3J0IFZlbHZldFNlbGVjdE9wdGlvbiBmcm9tICcuL3ZlbHZldC1zZWxlY3Qvb3B0aW9uLmd0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVsdmV0U2VsZWN0U2lnbmF0dXJlIHtcbiAgQXJnczoge1xuICAgIC8vLyBJbmRpY2F0ZSBpZiB0aGUgc2VsZWN0IGlzIGRpc2FibGVkLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvLy8gSW5kaWNhdGUgaWYgdGhlIHNlbGVjdCBpcyBpbnZhbGlkLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNJbnZhbGlkPzogYm9vbGVhbjtcblxuICAgIC8vLyBJbmRpY2F0ZSBpZiB0aGUgc2VsZWN0IGlzIHBpbGwgc2hhcGVkLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNQaWxsPzogYm9vbGVhbjtcblxuICAgIC8vLyBIYW5kbGUgdGhlIHNlbGVjdCdzIGBjaGFuZ2VgIGV2ZW50LlxuICAgIC8vLyBAZGVmYXVsdCBbdW5kZWZpbmVkXVxuICAgIG9uQ2hhbmdlPzogKHNlbGVjdGVkOiB1bmtub3duLCBldmVudDogRXZlbnQpID0-IHZvaWQ7XG5cbiAgICAvLy8gVGhlIHBsYWNlaG9sZGVyIG9mIHRoZSBzZWxlY3QuXG4gICAgLy8vIEBkZWZhdWx0IFtcIlwiXVxuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXG4gICAgLy8vIFRoZSBzZWxlY3RlZCBvcHRpb24gb2YgdGhlIHNlbGVjdC5cbiAgICAvLy8gQGRlZmF1bHQgW3VuZGVmaW5lZF1cbiAgICBzZWxlY3RlZD86IHVua25vd247XG5cbiAgICAvLy8gVGhlIHNpemUgb2YgdGhlIHNlbGVjdC5cbiAgICAvLy8gQGRlZmF1bHQgW1wibWRcIl1cbiAgICBzaXplPzogJ3NtJyB8ICdtZCcgfCAnbGcnO1xuXG4gICAgLy8vIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSBzZWxlY3QuXG4gICAgLy8vIEBkZWZhdWx0IFtcInByaW1hcnlcIl1cbiAgICB2YXJpYW50Pzogc3RyaW5nIHwgJ3ByaW1hcnknO1xuICB9O1xuICBCbG9ja3M6IHtcbiAgICAvLy8gVGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdC5cbiAgICBkZWZhdWx0OiBbXG4gICAgICB7XG4gICAgICAgIE9wdGlvbjogV2l0aEJvdW5kQXJnczxcbiAgICAgICAgICB0eXBlb2YgVmVsdmV0U2VsZWN0T3B0aW9uLFxuICAgICAgICAgICdwcml2YXRlT25DcmVhdGUnIHwgJ3ByaXZhdGVPbkRlc3Ryb3knIHwgJ3ByaXZhdGVTZWxlY3RlZCdcbiAgICAgICAgPjtcbiAgICAgIH0sXG4gICAgXTtcbiAgfTtcbiAgRWxlbWVudDogSFRNTFNlbGVjdEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlbHZldFNlbGVjdCBleHRlbmRzIENvbXBvbmVudDxWZWx2ZXRTZWxlY3RTaWduYXR1cmU-IHtcbiAgb3B0aW9ucyA9IG5ldyBNYXAoKTtcblxuICBnZXQgaGFzU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFyZ3Muc2VsZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmFyZ3Muc2VsZWN0ZWQgIT09IG51bGw7XG4gIH1cblxuICBnZXQgc2hvdWxkUmVuZGVyUGxhY2Vob2xkZXIoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5hcmdzLnBsYWNlaG9sZGVyKSAmJiB0aGlzLmhhc1NlbGVjdGlvbiA9PT0gZmFsc2U7XG4gIH1cblxuICBjaGFuZ2VIYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IHsgaXNEaXNhYmxlZCwgb25DaGFuZ2UgfSA9IHRoaXMuYXJncztcblxuICAgIGlmICh0eXBlb2Ygb25DaGFuZ2UgIT09ICdmdW5jdGlvbicgfHwgaXNEaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKFxuICAgICAgdGhpcy5vcHRpb25zLmdldCgoZXZlbnQudGFyZ2V0IGFzIEhUTUxTZWxlY3RFbGVtZW50KS52YWx1ZSksXG4gICAgICBldmVudCxcbiAgICApO1xuICB9O1xuXG4gIGFkZE9wdGlvbiA9IChpZDogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikgPT4ge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoaWQsIHZhbHVlKTtcbiAgfTtcblxuICByZW1vdmVPcHRpb24gPSAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRoaXMub3B0aW9ucy5kZWxldGUoaWQpO1xuICB9O1xuXG4gIDx0ZW1wbGF0ZT5cbiAgICA8c2VsZWN0XG4gICAgICBjbGFzcz17e2NuXG4gICAgICAgIFwidmVsdmV0LXNlbGVjdFwiXG4gICAgICAgIChjb25jYXQgXCJ2ZWx2ZXQtc2VsZWN0LVwiIChvciBAc2l6ZSBcIm1kXCIpKVxuICAgICAgICAoY29uY2F0IFwidmVsdmV0LXNlbGVjdC1cIiAob3IgQHZhcmlhbnQgXCJwcmltYXJ5XCIpKVxuICAgICAgICAoaWYgQGlzSW52YWxpZCBcInZlbHZldC1zZWxlY3QtaW52YWxpZFwiKVxuICAgICAgICAoaWYgQGlzUGlsbCBcInZlbHZldC1zZWxlY3QtcGlsbFwiKVxuICAgICAgICAoaWYgQGlzRGlzYWJsZWQgXCJ2ZWx2ZXQtc2VsZWN0LWRpc2FibGVkXCIpXG4gICAgICAgIChpZiB0aGlzLnNob3VsZFJlbmRlclBsYWNlaG9sZGVyIFwidmVsdmV0LXNlbGVjdC1wbGFjZWhvbGRlclwiKVxuICAgICAgICBcImZvcm0tc2VsZWN0XCJcbiAgICAgIH19XG4gICAgICBkaXNhYmxlZD17e0Bpc0Rpc2FibGVkfX1cbiAgICAgIHt7b24gXCJjaGFuZ2VcIiB0aGlzLmNoYW5nZUhhbmRsZXJ9fVxuICAgICAgLi4uYXR0cmlidXRlc1xuICAgID5cbiAgICAgIHt7I2lmIHRoaXMuc2hvdWxkUmVuZGVyUGxhY2Vob2xkZXJ9fVxuICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHNlbGVjdGVkPXt7dHJ1ZX19PlxuICAgICAgICAgIHt7QHBsYWNlaG9sZGVyfX1cbiAgICAgICAgPC9vcHRpb24-XG4gICAgICB7ey9pZn19XG4gICAgICB7e3lpZWxkXG4gICAgICAgIChoYXNoXG4gICAgICAgICAgT3B0aW9uPShjb21wb25lbnRcbiAgICAgICAgICAgIFZlbHZldFNlbGVjdE9wdGlvblxuICAgICAgICAgICAgcHJpdmF0ZU9uQ3JlYXRlPXRoaXMuYWRkT3B0aW9uXG4gICAgICAgICAgICBwcml2YXRlT25EZXN0cm95PXRoaXMucmVtb3ZlT3B0aW9uXG4gICAgICAgICAgICBwcml2YXRlU2VsZWN0ZWQ9QHNlbGVjdGVkXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvc2VsZWN0PlxuICA8L3RlbXBsYXRlPlxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTLE1BQU0sRUFBRSxJQUFJLFFBQVEsZ0JBQWdCO0FBQzdDLFNBQVMsRUFBRSxRQUFRLGtCQUFrQjtBQUNyQyxPQUFPLGVBQWUscUJBQXFCO0FBQzNDLGNBQWMsYUFBYSxRQUFRLGtCQUFrQjtBQUNyRCxTQUFTLEVBQUUsUUFBUSxzQkFBc0I7QUFDekMsU0FBUyxFQUFFLFFBQVEsNEJBQTRCO0FBQy9DLE9BQU8sd0JBQXdCLDZCQUE2QjtBQUU1RCxpQkFBaUI7SUFDZjtRQUNFLHVDQUF1QztRQUN2QyxvQkFBb0I7UUFDcEIsYUFBYSxPQUFPO1FBRXBCLHNDQUFzQztRQUN0QyxvQkFBb0I7UUFDcEIsWUFBWSxPQUFPO1FBRW5CLDBDQUEwQztRQUMxQyxvQkFBb0I7UUFDcEIsU0FBUyxPQUFPO1FBRWhCLHVDQUF1QztRQUN2Qyx3QkFBd0I7UUFDeEIsWUFBWSxVQUFVLE9BQU8sRUFBRSxPQUFPLFVBQVUsSUFBSTtRQUVwRCxrQ0FBa0M7UUFDbEMsaUJBQWlCO1FBQ2pCLGNBQWMsTUFBTTtRQUVwQixzQ0FBc0M7UUFDdEMsd0JBQXdCO1FBQ3hCLFdBQVcsT0FBTztRQUVsQiwyQkFBMkI7UUFDM0IsbUJBQW1CO1FBQ25CLE9BQU8sT0FBTyxPQUFPO1FBRXJCLGlDQUFpQztRQUNqQyx3QkFBd0I7UUFDeEIsVUFBVSxNQUFNLEdBQUc7O0lBRXJCO1FBQ0UsOEJBQThCO1FBQzlCO2dCQUVJLFFBQVEscUJBQ0Msb0JBQ1Asb0JBQW9CLHFCQUFxQjs7O0lBS2pELFNBQVM7O0FBR1gsZUFBZSxNQUFNLHFCQUFxQixVQUFVO0lBQ2xELFVBQVUsSUFBSSxNQUFNO0lBRXBCLElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUs7SUFDcEU7SUFFQSxJQUFJLDBCQUEwQjtRQUM1QixPQUFPLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLFlBQVksS0FBSztJQUNqRTtJQUVBLGdCQUFnQixDQUFDLE9BQU87UUFDdEIsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSTtRQUUxQyxJQUFJLE9BQU8sYUFBYSxjQUFjLGVBQWUsTUFBTTtZQUN6RDtRQUNGO1FBRUEsU0FDRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLGlCQUFpQixFQUFFLEtBQUssR0FDMUQ7SUFFSixFQUFFO0lBRUYsWUFBWSxDQUFDLElBQUksTUFBTSxFQUFFLE9BQU8sT0FBTztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJO0lBQ3ZCLEVBQUU7SUFFRixlQUFlLENBQUMsSUFBSSxNQUFNO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3RCLEVBQUU7SUFFRixNQUFBO1FBQUEsMENBQVUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQ1YsQ0FBQSxFQUFBO1lBQUEsV0FBQSxJQUFXO1lBQVg7Z0JBQUEsT0FBQSxLQUFBLFNBQUEsQ0FBQSxFQUFXO1lBQUQ7UUFBQTtJQUFBLENBaENBO0FBaUNaIn0"],"names":["VelvetSelect","Component","options","Map","hasSelection","args","selected","undefined","shouldRenderPlaceholder","Boolean","placeholder","changeHandler","event","isDisabled","onChange","get","target","value","addOption","id","set","removeOption","delete","setComponentTemplate","precompileTemplate","strictMode","scope","cn","concat","or","on","hash","VelvetSelectOption"],"mappings":";;;;;;;;;AAwDe,MAAMA,YAAA,SAAqBC,SAAA,CAAU;EAClDC,OAAA,GAAU,IAAIC,GAAA,EAAA;AAEd,EAAA,IAAIC,eAAe;AACjB,IAAA,OAAO,IAAI,CAACC,IAAI,CAACC,QAAQ,KAAKC,SAAA,IAAa,IAAI,CAACF,IAAI,CAACC,QAAQ,KAAK,IAAA;AACpE;AAEA,EAAA,IAAIE,0BAA0B;IAC5B,OAAOC,OAAA,CAAQ,IAAI,CAACJ,IAAI,CAACK,WAAW,CAAK,IAAA,IAAI,CAACN,YAAY,KAAK,KAAA;AACjE;AAEAO,EAAAA,aAAA,GAAiBC,KAAO,IAAA;IACtB,MAAM;MAAEC,UAAU;AAAEC,MAAAA;KAAU,GAAG,IAAI,CAACT,IAAI;AAE1C,IAAA,IAAI,OAAOS,QAAA,KAAa,UAAcD,IAAAA,UAAA,KAAe,IAAM,EAAA;AACzD,MAAA;AACF;AAEAC,IAAAA,QAAA,CACE,IAAI,CAACZ,OAAO,CAACa,GAAG,CAAEH,KAAA,CAAMI,MAAM,CAAuBC,KAAK,GAC1DL,KAAA,CAAA;AAEJ,GAAA;AAEAM,EAAAA,SAAA,GAAYA,CAACC,EAAU,EAAEF,KAAc,KAAA;AACrC,IAAA,IAAI,CAACf,OAAO,CAACkB,GAAG,CAACD,EAAA,EAAIF,KAAA,CAAA;AACvB,GAAA;AAEAI,EAAAA,YAAA,GAAgBF,EAAU,IAAA;AACxB,IAAA,IAAI,CAACjB,OAAO,CAACoB,MAAM,CAACH,EAAA,CAAA;AACtB,GAAA;AAEA,EAAA;IAAAI,oBAAA,CAAAC,kBAAA,CAgCA,6uBAAA,EAAA;MAAAC,UAAA,EAAA,IAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAC,EAAA;QAAAC,MAAA;QAAAC,EAAA;QAAAC,EAAA;QAAAC,IAAA;AAAAC,QAAAA;AAAA,OAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA;AAAD;AACZ;;;;"}