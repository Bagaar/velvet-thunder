{"version":3,"file":"velvet-button.js","sources":["../../src/components/velvet-button.gts"],"sourcesContent":["import { template as template_79385039a96847438528480d5c37f16d } from \"@ember/template-compiler\";\nimport { concat, hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport Component from '@glimmer/component';\nimport type { ModifierLike } from '@glint/template';\nimport { or } from 'ember-truth-helpers';\nimport { cn } from '../-private/helpers/cn.ts';\nimport type { TriggerSignature } from './velvet-dropdown.gts';\nimport VelvetIconChevronDown from './velvet-icon/chevron-down.gts';\nimport VelvetIconXMark from './velvet-icon/x-mark.gts';\nimport VelvetSpinner from './velvet-spinner.gts';\nexport interface VelvetButtonSignature {\n    Args: {\n        /// Indicate if the button is disabled.\n        /// @default [false]\n        isDisabled?: boolean;\n        /// Indicate if the button discloses content.\n        /// @default [false]\n        isDisclosure?: boolean;\n        /// Indicate if the button's disclosed content is expanded.\n        /// @default [false]\n        isExpanded?: boolean;\n        /// Indicate if the button should render a loading state.\n        /// @default [false]\n        isLoading?: boolean;\n        /// Indicate if the button is pill shaped.\n        /// @default [false]\n        isPill?: boolean;\n        /// Make the button renderless.\n        /// @default [false]\n        isRenderless?: boolean;\n        /// Handle the button's `click` event.\n        /// @default [undefined]\n        onClick?: (event: MouseEvent) => void;\n        /// The size of the button.\n        /// @default [\"md\"]\n        size?: 'xs' | 'sm' | 'md' | 'lg';\n        /// The type of the button.\n        /// @default [\"button\"]\n        type?: 'button' | 'reset' | 'submit';\n        /// The appearance of the button.\n        /// @default [\"primary\"]\n        variant?: string | 'primary';\n        privateDropdownTrigger?: ModifierLike<TriggerSignature>;\n    };\n    Blocks: {\n        /// The content of the button.\n        default: [{\n                class: string;\n            }];\n    };\n    Element: HTMLButtonElement;\n}\nexport default class VelvetButton extends Component<VelvetButtonSignature> {\n    clickHandler = (event: MouseEvent)=>{\n        const { isDisabled, onClick } = this.args;\n        if (typeof onClick !== 'function' || isDisabled === true) {\n            return;\n        }\n        onClick(event);\n    };\n    static{\n        template_79385039a96847438528480d5c37f16d(`\n    {{#let\n      (cn\n        \"velvet-button\"\n        (concat \"velvet-button-\" (or @size \"md\"))\n        (concat \"velvet-button-\" (or @variant \"primary\"))\n        (if @isPill \"velvet-button-pill\")\n        (if @isDisabled \"velvet-button-disabled\")\n        (if @isDisclosure (if @isExpanded \"velvet-button-expanded\"))\n      )\n      as |className|\n    }}\n      {{#if @isRenderless}}\n        {{yield (hash class=className)}}\n      {{else}}\n        <button\n          aria-expanded={{if @isDisclosure (if @isExpanded \"true\" \"false\") null}}\n          class={{className}}\n          disabled={{@isDisabled}}\n          type={{or @type \"button\"}}\n          {{on \"click\" this.clickHandler}}\n          {{@privateDropdownTrigger}}\n          ...attributes\n        >\n          {{#if @isLoading}}\n            <VelvetSpinner />\n          {{/if}}\n          {{yield (hash class=className)}}\n          {{#if @isDisclosure}}\n            {{#if @isExpanded}}\n              <VelvetIconXMark class=\"velvet-button-disclosure-icon\" />\n            {{else}}\n              <VelvetIconChevronDown class=\"velvet-button-disclosure-icon\" />\n            {{/if}}\n          {{/if}}\n        </button>\n      {{/if}}\n    {{/let}}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3NyYy9jb21wb25lbnRzL3ZlbHZldC1idXR0b24uZ3RzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmNhdCwgaGFzaCB9IGZyb20gJ0BlbWJlci9oZWxwZXInO1xuaW1wb3J0IHsgb24gfSBmcm9tICdAZW1iZXIvbW9kaWZpZXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICdAZ2xpbW1lci9jb21wb25lbnQnO1xuaW1wb3J0IHR5cGUgeyBNb2RpZmllckxpa2UgfSBmcm9tICdAZ2xpbnQvdGVtcGxhdGUnO1xuaW1wb3J0IHsgb3IgfSBmcm9tICdlbWJlci10cnV0aC1oZWxwZXJzJztcbmltcG9ydCB7IGNuIH0gZnJvbSAnLi4vLXByaXZhdGUvaGVscGVycy9jbi50cyc7XG5pbXBvcnQgdHlwZSB7IFRyaWdnZXJTaWduYXR1cmUgfSBmcm9tICcuL3ZlbHZldC1kcm9wZG93bi5ndHMnO1xuaW1wb3J0IFZlbHZldEljb25DaGV2cm9uRG93biBmcm9tICcuL3ZlbHZldC1pY29uL2NoZXZyb24tZG93bi5ndHMnO1xuaW1wb3J0IFZlbHZldEljb25YTWFyayBmcm9tICcuL3ZlbHZldC1pY29uL3gtbWFyay5ndHMnO1xuaW1wb3J0IFZlbHZldFNwaW5uZXIgZnJvbSAnLi92ZWx2ZXQtc3Bpbm5lci5ndHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZlbHZldEJ1dHRvblNpZ25hdHVyZSB7XG4gIEFyZ3M6IHtcbiAgICAvLy8gSW5kaWNhdGUgaWYgdGhlIGJ1dHRvbiBpcyBkaXNhYmxlZC5cbiAgICAvLy8gQGRlZmF1bHQgW2ZhbHNlXVxuICAgIGlzRGlzYWJsZWQ_OiBib29sZWFuO1xuXG4gICAgLy8vIEluZGljYXRlIGlmIHRoZSBidXR0b24gZGlzY2xvc2VzIGNvbnRlbnQuXG4gICAgLy8vIEBkZWZhdWx0IFtmYWxzZV1cbiAgICBpc0Rpc2Nsb3N1cmU_OiBib29sZWFuO1xuXG4gICAgLy8vIEluZGljYXRlIGlmIHRoZSBidXR0b24ncyBkaXNjbG9zZWQgY29udGVudCBpcyBleHBhbmRlZC5cbiAgICAvLy8gQGRlZmF1bHQgW2ZhbHNlXVxuICAgIGlzRXhwYW5kZWQ_OiBib29sZWFuO1xuXG4gICAgLy8vIEluZGljYXRlIGlmIHRoZSBidXR0b24gc2hvdWxkIHJlbmRlciBhIGxvYWRpbmcgc3RhdGUuXG4gICAgLy8vIEBkZWZhdWx0IFtmYWxzZV1cbiAgICBpc0xvYWRpbmc_OiBib29sZWFuO1xuXG4gICAgLy8vIEluZGljYXRlIGlmIHRoZSBidXR0b24gaXMgcGlsbCBzaGFwZWQuXG4gICAgLy8vIEBkZWZhdWx0IFtmYWxzZV1cbiAgICBpc1BpbGw_OiBib29sZWFuO1xuXG4gICAgLy8vIE1ha2UgdGhlIGJ1dHRvbiByZW5kZXJsZXNzLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNSZW5kZXJsZXNzPzogYm9vbGVhbjtcblxuICAgIC8vLyBIYW5kbGUgdGhlIGJ1dHRvbidzIGBjbGlja2AgZXZlbnQuXG4gICAgLy8vIEBkZWZhdWx0IFt1bmRlZmluZWRdXG4gICAgb25DbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuICAgIC8vLyBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgIC8vLyBAZGVmYXVsdCBbXCJtZFwiXVxuICAgIHNpemU_OiAneHMnIHwgJ3NtJyB8ICdtZCcgfCAnbGcnO1xuXG4gICAgLy8vIFRoZSB0eXBlIG9mIHRoZSBidXR0b24uXG4gICAgLy8vIEBkZWZhdWx0IFtcImJ1dHRvblwiXVxuICAgIHR5cGU_OiAnYnV0dG9uJyB8ICdyZXNldCcgfCAnc3VibWl0JztcblxuICAgIC8vLyBUaGUgYXBwZWFyYW5jZSBvZiB0aGUgYnV0dG9uLlxuICAgIC8vLyBAZGVmYXVsdCBbXCJwcmltYXJ5XCJdXG4gICAgdmFyaWFudD86IHN0cmluZyB8ICdwcmltYXJ5JztcblxuICAgIHByaXZhdGVEcm9wZG93blRyaWdnZXI_OiBNb2RpZmllckxpa2U8VHJpZ2dlclNpZ25hdHVyZT47XG4gIH07XG4gIEJsb2Nrczoge1xuICAgIC8vLyBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgIGRlZmF1bHQ6IFt7IGNsYXNzOiBzdHJpbmcgfV07XG4gIH07XG4gIEVsZW1lbnQ6IEhUTUxCdXR0b25FbGVtZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZWx2ZXRCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQ8VmVsdmV0QnV0dG9uU2lnbmF0dXJlPiB7XG4gIGNsaWNrSGFuZGxlciA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IHsgaXNEaXNhYmxlZCwgb25DbGljayB9ID0gdGhpcy5hcmdzO1xuXG4gICAgaWYgKHR5cGVvZiBvbkNsaWNrICE9PSAnZnVuY3Rpb24nIHx8IGlzRGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbkNsaWNrKGV2ZW50KTtcbiAgfTtcblxuICA8dGVtcGxhdGU-XG4gICAge3sjbGV0XG4gICAgICAoY25cbiAgICAgICAgXCJ2ZWx2ZXQtYnV0dG9uXCJcbiAgICAgICAgKGNvbmNhdCBcInZlbHZldC1idXR0b24tXCIgKG9yIEBzaXplIFwibWRcIikpXG4gICAgICAgIChjb25jYXQgXCJ2ZWx2ZXQtYnV0dG9uLVwiIChvciBAdmFyaWFudCBcInByaW1hcnlcIikpXG4gICAgICAgIChpZiBAaXNQaWxsIFwidmVsdmV0LWJ1dHRvbi1waWxsXCIpXG4gICAgICAgIChpZiBAaXNEaXNhYmxlZCBcInZlbHZldC1idXR0b24tZGlzYWJsZWRcIilcbiAgICAgICAgKGlmIEBpc0Rpc2Nsb3N1cmUgKGlmIEBpc0V4cGFuZGVkIFwidmVsdmV0LWJ1dHRvbi1leHBhbmRlZFwiKSlcbiAgICAgIClcbiAgICAgIGFzIHxjbGFzc05hbWV8XG4gICAgfX1cbiAgICAgIHt7I2lmIEBpc1JlbmRlcmxlc3N9fVxuICAgICAgICB7e3lpZWxkIChoYXNoIGNsYXNzPWNsYXNzTmFtZSl9fVxuICAgICAge3tlbHNlfX1cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9e3tpZiBAaXNEaXNjbG9zdXJlIChpZiBAaXNFeHBhbmRlZCBcInRydWVcIiBcImZhbHNlXCIpIG51bGx9fVxuICAgICAgICAgIGNsYXNzPXt7Y2xhc3NOYW1lfX1cbiAgICAgICAgICBkaXNhYmxlZD17e0Bpc0Rpc2FibGVkfX1cbiAgICAgICAgICB0eXBlPXt7b3IgQHR5cGUgXCJidXR0b25cIn19XG4gICAgICAgICAge3tvbiBcImNsaWNrXCIgdGhpcy5jbGlja0hhbmRsZXJ9fVxuICAgICAgICAgIHt7QHByaXZhdGVEcm9wZG93blRyaWdnZXJ9fVxuICAgICAgICAgIC4uLmF0dHJpYnV0ZXNcbiAgICAgICAgPlxuICAgICAgICAgIHt7I2lmIEBpc0xvYWRpbmd9fVxuICAgICAgICAgICAgPFZlbHZldFNwaW5uZXIgLz5cbiAgICAgICAgICB7ey9pZn19XG4gICAgICAgICAge3t5aWVsZCAoaGFzaCBjbGFzcz1jbGFzc05hbWUpfX1cbiAgICAgICAgICB7eyNpZiBAaXNEaXNjbG9zdXJlfX1cbiAgICAgICAgICAgIHt7I2lmIEBpc0V4cGFuZGVkfX1cbiAgICAgICAgICAgICAgPFZlbHZldEljb25YTWFyayBjbGFzcz1cInZlbHZldC1idXR0b24tZGlzY2xvc3VyZS1pY29uXCIgLz5cbiAgICAgICAgICAgIHt7ZWxzZX19XG4gICAgICAgICAgICAgIDxWZWx2ZXRJY29uQ2hldnJvbkRvd24gY2xhc3M9XCJ2ZWx2ZXQtYnV0dG9uLWRpc2Nsb3N1cmUtaWNvblwiIC8-XG4gICAgICAgICAgICB7ey9pZn19XG4gICAgICAgICAge3svaWZ9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIHt7L2lmfX1cbiAgICB7ey9sZXR9fVxuICA8L3RlbXBsYXRlPlxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTLE1BQU0sRUFBRSxJQUFJLFFBQVEsZ0JBQWdCO0FBQzdDLFNBQVMsRUFBRSxRQUFRLGtCQUFrQjtBQUNyQyxPQUFPLGVBQWUscUJBQXFCO0FBQzNDLGNBQWMsWUFBWSxRQUFRLGtCQUFrQjtBQUNwRCxTQUFTLEVBQUUsUUFBUSxzQkFBc0I7QUFDekMsU0FBUyxFQUFFLFFBQVEsNEJBQTRCO0FBQy9DLGNBQWMsZ0JBQWdCLFFBQVEsd0JBQXdCO0FBQzlELE9BQU8sMkJBQTJCLGlDQUFpQztBQUNuRSxPQUFPLHFCQUFxQiwyQkFBMkI7QUFDdkQsT0FBTyxtQkFBbUIsdUJBQXVCO0FBRWpELGlCQUFpQjtJQUNmO1FBQ0UsdUNBQXVDO1FBQ3ZDLG9CQUFvQjtRQUNwQixhQUFhLE9BQU87UUFFcEIsNkNBQTZDO1FBQzdDLG9CQUFvQjtRQUNwQixlQUFlLE9BQU87UUFFdEIsMkRBQTJEO1FBQzNELG9CQUFvQjtRQUNwQixhQUFhLE9BQU87UUFFcEIseURBQXlEO1FBQ3pELG9CQUFvQjtRQUNwQixZQUFZLE9BQU87UUFFbkIsMENBQTBDO1FBQzFDLG9CQUFvQjtRQUNwQixTQUFTLE9BQU87UUFFaEIsK0JBQStCO1FBQy9CLG9CQUFvQjtRQUNwQixlQUFlLE9BQU87UUFFdEIsc0NBQXNDO1FBQ3RDLHdCQUF3QjtRQUN4QixXQUFXLE9BQU8sZUFBZSxJQUFJO1FBRXJDLDJCQUEyQjtRQUMzQixtQkFBbUI7UUFDbkIsT0FBTyxPQUFPLE9BQU8sT0FBTztRQUU1QiwyQkFBMkI7UUFDM0IsdUJBQXVCO1FBQ3ZCLE9BQU8sV0FBVyxVQUFVO1FBRTVCLGlDQUFpQztRQUNqQyx3QkFBd0I7UUFDeEIsVUFBVSxNQUFNLEdBQUc7UUFFbkIseUJBQXlCLGFBQWE7O0lBRXhDO1FBQ0UsOEJBQThCO1FBQzlCO2dCQUFZLE9BQU8sTUFBTTs7O0lBRTNCLFNBQVM7O0FBR1gsZUFBZSxNQUFNLHFCQUFxQixVQUFVO0lBQ2xELGVBQWUsQ0FBQyxPQUFPO1FBQ3JCLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUk7UUFFekMsSUFBSSxPQUFPLFlBQVksY0FBYyxlQUFlLE1BQU07WUFDeEQ7UUFDRjtRQUVBLFFBQVE7SUFDVixFQUFFO0lBRUYsTUFBQTtRQUFBLDBDQUFVLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0NWLENBQUEsRUFBQTtZQUFBLFdBQUEsSUFBVztZQUFYO2dCQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztZQUFEO1FBQUE7SUFBQSxDQXRDQTtBQXVDWiJ9"],"names":["VelvetButton","Component","clickHandler","event","isDisabled","onClick","args","setComponentTemplate","precompileTemplate","strictMode","scope","cn","concat","or","hash","on","VelvetSpinner","VelvetIconXMark","VelvetIconChevronDown"],"mappings":";;;;;;;;;;;AA8De,MAAMA,YAAA,SAAqBC,SAAA,CAAU;AAClDC,EAAAA,YAAA,GAAgBC,KAAO,IAAA;IACrB,MAAM;MAAEC,UAAU;AAAEC,MAAAA;KAAS,GAAG,IAAI,CAACC,IAAI;AAEzC,IAAA,IAAI,OAAOD,OAAA,KAAY,UAAcD,IAAAA,UAAA,KAAe,IAAM,EAAA;AACxD,MAAA;AACF;AAEAC,IAAAA,OAAA,CAAQF,KAAA,CAAA;AACV,GAAA;AAEA,EAAA;IAAAI,oBAAA,CAAAC,kBAAA,CAsCA,ikCAAA,EAAA;MAAAC,UAAA,EAAA,IAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAC,EAAA;QAAAC,MAAA;QAAAC,EAAA;QAAAC,IAAA;QAAAC,EAAA;QAAAC,aAAA;QAAAC,eAAA;AAAAC,QAAAA;AAAA,OAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA;AAAD;AACZ;;;;"}