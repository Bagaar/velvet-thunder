{"version":3,"file":"velvet-icon-button.js","sources":["../../src/components/velvet-icon-button.gts"],"sourcesContent":["import { template as template_0822bf1742224d00b41740c995487a45 } from \"@ember/template-compiler\";\nimport { concat, hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport Component from '@glimmer/component';\nimport type { ModifierLike } from '@glint/template';\nimport { or } from 'ember-truth-helpers';\nimport { cn } from '../-private/helpers/cn.ts';\nimport type { TriggerSignature } from './velvet-dropdown.gts';\nimport VelvetIconChevronDown from './velvet-icon/chevron-down.gts';\nimport VelvetIconXMark from './velvet-icon/x-mark.gts';\nimport VelvetSpinner from './velvet-spinner.gts';\nexport interface VelvetIconButtonSignature {\n    Args: {\n        /// Indicate if the icon button is disabled.\n        /// @default [false]\n        isDisabled?: boolean;\n        /// Indicate if the icon button discloses content.\n        /// @default [false]\n        isDisclosure?: boolean;\n        /// Indicate if the icon button's disclosed content is expanded.\n        /// @default [false]\n        isExpanded?: boolean;\n        /// Indicate if the icon button should render a loading state.\n        /// @default [false]\n        isLoading?: boolean;\n        /// Make the icon button renderless.\n        /// @default [false]\n        isRenderless?: boolean;\n        /// Indicate if the icon button is round.\n        /// @default [false]\n        isRound?: boolean;\n        /// Handle the icon button's `click` event.\n        /// @default [undefined]\n        onClick?: (event: MouseEvent) => void;\n        /// The size of the icon button.\n        /// @default [\"md\"]\n        size?: 'xs' | 'sm' | 'md' | 'lg';\n        /// The type of the icon button.\n        /// @default [\"button\"]\n        type?: 'button' | 'reset' | 'submit';\n        /// The appearance of the icon button.\n        /// @default [\"primary\"]\n        variant?: string | 'primary';\n        privateDropdownTrigger?: ModifierLike<TriggerSignature>;\n    };\n    Blocks: {\n        /// The icon of the icon button.\n        default: [{\n                class: string;\n            }];\n    };\n    Element: HTMLButtonElement;\n}\nexport default class VelvetIconButton extends Component<VelvetIconButtonSignature> {\n    clickHandler = (event: MouseEvent)=>{\n        const { isDisabled, onClick } = this.args;\n        if (typeof onClick !== 'function' || isDisabled === true) {\n            return;\n        }\n        onClick(event);\n    };\n    static{\n        template_0822bf1742224d00b41740c995487a45(`\n    {{#let\n      (cn\n        \"velvet-icon-button\"\n        (concat \"velvet-icon-button-\" (or @size \"md\"))\n        (concat \"velvet-icon-button-\" (or @variant \"primary\"))\n        (if @isRound \"velvet-icon-button-round\")\n        (if @isDisabled \"velvet-icon-button-disabled\")\n        (if @isDisclosure (if @isExpanded \"velvet-icon-button-expanded\"))\n      )\n      as |className|\n    }}\n      {{#if @isRenderless}}\n        {{yield (hash class=className)}}\n      {{else}}\n        <button\n          class={{className}}\n          disabled={{@isDisabled}}\n          type={{or @type \"button\"}}\n          {{on \"click\" this.clickHandler}}\n          {{@privateDropdownTrigger}}\n          ...attributes\n        >\n          {{#if @isLoading}}\n            <VelvetSpinner />\n          {{else if (has-block)}}\n            {{yield (hash class=className)}}\n          {{else if @isDisclosure}}\n            {{#if @isExpanded}}\n              <VelvetIconXMark class=\"velvet-icon-button-disclosure-icon\" />\n            {{else}}\n              <VelvetIconChevronDown\n                class=\"velvet-icon-button-disclosure-icon\"\n              />\n            {{/if}}\n          {{/if}}\n        </button>\n      {{/if}}\n    {{/let}}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3ZlbHZldC10aHVuZGVyL3NyYy9jb21wb25lbnRzL3ZlbHZldC1pY29uLWJ1dHRvbi5ndHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uY2F0LCBoYXNoIH0gZnJvbSAnQGVtYmVyL2hlbHBlcic7XG5pbXBvcnQgeyBvbiB9IGZyb20gJ0BlbWJlci9tb2RpZmllcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ0BnbGltbWVyL2NvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyTGlrZSB9IGZyb20gJ0BnbGludC90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBvciB9IGZyb20gJ2VtYmVyLXRydXRoLWhlbHBlcnMnO1xuaW1wb3J0IHsgY24gfSBmcm9tICcuLi8tcHJpdmF0ZS9oZWxwZXJzL2NuLnRzJztcbmltcG9ydCB0eXBlIHsgVHJpZ2dlclNpZ25hdHVyZSB9IGZyb20gJy4vdmVsdmV0LWRyb3Bkb3duLmd0cyc7XG5pbXBvcnQgVmVsdmV0SWNvbkNoZXZyb25Eb3duIGZyb20gJy4vdmVsdmV0LWljb24vY2hldnJvbi1kb3duLmd0cyc7XG5pbXBvcnQgVmVsdmV0SWNvblhNYXJrIGZyb20gJy4vdmVsdmV0LWljb24veC1tYXJrLmd0cyc7XG5pbXBvcnQgVmVsdmV0U3Bpbm5lciBmcm9tICcuL3ZlbHZldC1zcGlubmVyLmd0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVsdmV0SWNvbkJ1dHRvblNpZ25hdHVyZSB7XG4gIEFyZ3M6IHtcbiAgICAvLy8gSW5kaWNhdGUgaWYgdGhlIGljb24gYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvLy8gSW5kaWNhdGUgaWYgdGhlIGljb24gYnV0dG9uIGRpc2Nsb3NlcyBjb250ZW50LlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNEaXNjbG9zdXJlPzogYm9vbGVhbjtcblxuICAgIC8vLyBJbmRpY2F0ZSBpZiB0aGUgaWNvbiBidXR0b24ncyBkaXNjbG9zZWQgY29udGVudCBpcyBleHBhbmRlZC5cbiAgICAvLy8gQGRlZmF1bHQgW2ZhbHNlXVxuICAgIGlzRXhwYW5kZWQ_OiBib29sZWFuO1xuXG4gICAgLy8vIEluZGljYXRlIGlmIHRoZSBpY29uIGJ1dHRvbiBzaG91bGQgcmVuZGVyIGEgbG9hZGluZyBzdGF0ZS5cbiAgICAvLy8gQGRlZmF1bHQgW2ZhbHNlXVxuICAgIGlzTG9hZGluZz86IGJvb2xlYW47XG5cbiAgICAvLy8gTWFrZSB0aGUgaWNvbiBidXR0b24gcmVuZGVybGVzcy5cbiAgICAvLy8gQGRlZmF1bHQgW2ZhbHNlXVxuICAgIGlzUmVuZGVybGVzcz86IGJvb2xlYW47XG5cbiAgICAvLy8gSW5kaWNhdGUgaWYgdGhlIGljb24gYnV0dG9uIGlzIHJvdW5kLlxuICAgIC8vLyBAZGVmYXVsdCBbZmFsc2VdXG4gICAgaXNSb3VuZD86IGJvb2xlYW47XG5cbiAgICAvLy8gSGFuZGxlIHRoZSBpY29uIGJ1dHRvbidzIGBjbGlja2AgZXZlbnQuXG4gICAgLy8vIEBkZWZhdWx0IFt1bmRlZmluZWRdXG4gICAgb25DbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuICAgIC8vLyBUaGUgc2l6ZSBvZiB0aGUgaWNvbiBidXR0b24uXG4gICAgLy8vIEBkZWZhdWx0IFtcIm1kXCJdXG4gICAgc2l6ZT86ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZyc7XG5cbiAgICAvLy8gVGhlIHR5cGUgb2YgdGhlIGljb24gYnV0dG9uLlxuICAgIC8vLyBAZGVmYXVsdCBbXCJidXR0b25cIl1cbiAgICB0eXBlPzogJ2J1dHRvbicgfCAncmVzZXQnIHwgJ3N1Ym1pdCc7XG5cbiAgICAvLy8gVGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGljb24gYnV0dG9uLlxuICAgIC8vLyBAZGVmYXVsdCBbXCJwcmltYXJ5XCJdXG4gICAgdmFyaWFudD86IHN0cmluZyB8ICdwcmltYXJ5JztcblxuICAgIHByaXZhdGVEcm9wZG93blRyaWdnZXI_OiBNb2RpZmllckxpa2U8VHJpZ2dlclNpZ25hdHVyZT47XG4gIH07XG4gIEJsb2Nrczoge1xuICAgIC8vLyBUaGUgaWNvbiBvZiB0aGUgaWNvbiBidXR0b24uXG4gICAgZGVmYXVsdDogW3sgY2xhc3M6IHN0cmluZyB9XTtcbiAgfTtcbiAgRWxlbWVudDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlbHZldEljb25CdXR0b24gZXh0ZW5kcyBDb21wb25lbnQ8VmVsdmV0SWNvbkJ1dHRvblNpZ25hdHVyZT4ge1xuICBjbGlja0hhbmRsZXIgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0-IHtcbiAgICBjb25zdCB7IGlzRGlzYWJsZWQsIG9uQ2xpY2sgfSA9IHRoaXMuYXJncztcblxuICAgIGlmICh0eXBlb2Ygb25DbGljayAhPT0gJ2Z1bmN0aW9uJyB8fCBpc0Rpc2FibGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25DbGljayhldmVudCk7XG4gIH07XG5cbiAgPHRlbXBsYXRlPlxuICAgIHt7I2xldFxuICAgICAgKGNuXG4gICAgICAgIFwidmVsdmV0LWljb24tYnV0dG9uXCJcbiAgICAgICAgKGNvbmNhdCBcInZlbHZldC1pY29uLWJ1dHRvbi1cIiAob3IgQHNpemUgXCJtZFwiKSlcbiAgICAgICAgKGNvbmNhdCBcInZlbHZldC1pY29uLWJ1dHRvbi1cIiAob3IgQHZhcmlhbnQgXCJwcmltYXJ5XCIpKVxuICAgICAgICAoaWYgQGlzUm91bmQgXCJ2ZWx2ZXQtaWNvbi1idXR0b24tcm91bmRcIilcbiAgICAgICAgKGlmIEBpc0Rpc2FibGVkIFwidmVsdmV0LWljb24tYnV0dG9uLWRpc2FibGVkXCIpXG4gICAgICAgIChpZiBAaXNEaXNjbG9zdXJlIChpZiBAaXNFeHBhbmRlZCBcInZlbHZldC1pY29uLWJ1dHRvbi1leHBhbmRlZFwiKSlcbiAgICAgIClcbiAgICAgIGFzIHxjbGFzc05hbWV8XG4gICAgfX1cbiAgICAgIHt7I2lmIEBpc1JlbmRlcmxlc3N9fVxuICAgICAgICB7e3lpZWxkIChoYXNoIGNsYXNzPWNsYXNzTmFtZSl9fVxuICAgICAge3tlbHNlfX1cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPXt7Y2xhc3NOYW1lfX1cbiAgICAgICAgICBkaXNhYmxlZD17e0Bpc0Rpc2FibGVkfX1cbiAgICAgICAgICB0eXBlPXt7b3IgQHR5cGUgXCJidXR0b25cIn19XG4gICAgICAgICAge3tvbiBcImNsaWNrXCIgdGhpcy5jbGlja0hhbmRsZXJ9fVxuICAgICAgICAgIHt7QHByaXZhdGVEcm9wZG93blRyaWdnZXJ9fVxuICAgICAgICAgIC4uLmF0dHJpYnV0ZXNcbiAgICAgICAgPlxuICAgICAgICAgIHt7I2lmIEBpc0xvYWRpbmd9fVxuICAgICAgICAgICAgPFZlbHZldFNwaW5uZXIgLz5cbiAgICAgICAgICB7e2Vsc2UgaWYgKGhhcy1ibG9jayl9fVxuICAgICAgICAgICAge3t5aWVsZCAoaGFzaCBjbGFzcz1jbGFzc05hbWUpfX1cbiAgICAgICAgICB7e2Vsc2UgaWYgQGlzRGlzY2xvc3VyZX19XG4gICAgICAgICAgICB7eyNpZiBAaXNFeHBhbmRlZH19XG4gICAgICAgICAgICAgIDxWZWx2ZXRJY29uWE1hcmsgY2xhc3M9XCJ2ZWx2ZXQtaWNvbi1idXR0b24tZGlzY2xvc3VyZS1pY29uXCIgLz5cbiAgICAgICAgICAgIHt7ZWxzZX19XG4gICAgICAgICAgICAgIDxWZWx2ZXRJY29uQ2hldnJvbkRvd25cbiAgICAgICAgICAgICAgICBjbGFzcz1cInZlbHZldC1pY29uLWJ1dHRvbi1kaXNjbG9zdXJlLWljb25cIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAge3svaWZ9fVxuICAgICAgICAgIHt7L2lmfX1cbiAgICAgICAgPC9idXR0b24-XG4gICAgICB7ey9pZn19XG4gICAge3svbGV0fX1cbiAgPC90ZW1wbGF0ZT5cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsU0FBUyxNQUFNLEVBQUUsSUFBSSxRQUFRLGdCQUFnQjtBQUM3QyxTQUFTLEVBQUUsUUFBUSxrQkFBa0I7QUFDckMsT0FBTyxlQUFlLHFCQUFxQjtBQUMzQyxjQUFjLFlBQVksUUFBUSxrQkFBa0I7QUFDcEQsU0FBUyxFQUFFLFFBQVEsc0JBQXNCO0FBQ3pDLFNBQVMsRUFBRSxRQUFRLDRCQUE0QjtBQUMvQyxjQUFjLGdCQUFnQixRQUFRLHdCQUF3QjtBQUM5RCxPQUFPLDJCQUEyQixpQ0FBaUM7QUFDbkUsT0FBTyxxQkFBcUIsMkJBQTJCO0FBQ3ZELE9BQU8sbUJBQW1CLHVCQUF1QjtBQUVqRCxpQkFBaUI7SUFDZjtRQUNFLDRDQUE0QztRQUM1QyxvQkFBb0I7UUFDcEIsYUFBYSxPQUFPO1FBRXBCLGtEQUFrRDtRQUNsRCxvQkFBb0I7UUFDcEIsZUFBZSxPQUFPO1FBRXRCLGdFQUFnRTtRQUNoRSxvQkFBb0I7UUFDcEIsYUFBYSxPQUFPO1FBRXBCLDhEQUE4RDtRQUM5RCxvQkFBb0I7UUFDcEIsWUFBWSxPQUFPO1FBRW5CLG9DQUFvQztRQUNwQyxvQkFBb0I7UUFDcEIsZUFBZSxPQUFPO1FBRXRCLHlDQUF5QztRQUN6QyxvQkFBb0I7UUFDcEIsVUFBVSxPQUFPO1FBRWpCLDJDQUEyQztRQUMzQyx3QkFBd0I7UUFDeEIsV0FBVyxPQUFPLGVBQWUsSUFBSTtRQUVyQyxnQ0FBZ0M7UUFDaEMsbUJBQW1CO1FBQ25CLE9BQU8sT0FBTyxPQUFPLE9BQU87UUFFNUIsZ0NBQWdDO1FBQ2hDLHVCQUF1QjtRQUN2QixPQUFPLFdBQVcsVUFBVTtRQUU1QixzQ0FBc0M7UUFDdEMsd0JBQXdCO1FBQ3hCLFVBQVUsTUFBTSxHQUFHO1FBRW5CLHlCQUF5QixhQUFhOztJQUV4QztRQUNFLGdDQUFnQztRQUNoQztnQkFBWSxPQUFPLE1BQU07OztJQUUzQixTQUFTOztBQUdYLGVBQWUsTUFBTSx5QkFBeUIsVUFBVTtJQUN0RCxlQUFlLENBQUMsT0FBTztRQUNyQixNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJO1FBRXpDLElBQUksT0FBTyxZQUFZLGNBQWMsZUFBZSxNQUFNO1lBQ3hEO1FBQ0Y7UUFFQSxRQUFRO0lBQ1YsRUFBRTtJQUVGLE1BQUE7UUFBQSwwQ0FBVSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF1Q1YsQ0FBQSxFQUFBO1lBQUEsV0FBQSxJQUFXO1lBQVg7Z0JBQUEsT0FBQSxLQUFBLFNBQUEsQ0FBQSxFQUFXO1lBQUQ7UUFBQTtJQUFBLENBdkNBO0FBd0NaIn0"],"names":["VelvetIconButton","Component","clickHandler","event","isDisabled","onClick","args","setComponentTemplate","precompileTemplate","strictMode","scope","cn","concat","or","hash","on","VelvetSpinner","VelvetIconXMark","VelvetIconChevronDown"],"mappings":";;;;;;;;;;;AA8De,MAAMA,gBAAA,SAAyBC,SAAA,CAAU;AACtDC,EAAAA,YAAA,GAAgBC,KAAO,IAAA;IACrB,MAAM;MAAEC,UAAU;AAAEC,MAAAA;KAAS,GAAG,IAAI,CAACC,IAAI;AAEzC,IAAA,IAAI,OAAOD,OAAA,KAAY,UAAcD,IAAAA,UAAA,KAAe,IAAM,EAAA;AACxD,MAAA;AACF;AAEAC,IAAAA,OAAA,CAAQF,KAAA,CAAA;AACV,GAAA;AAEA,EAAA;IAAAI,oBAAA,CAAAC,kBAAA,CAuCA,qjCAAA,EAAA;MAAAC,UAAA,EAAA,IAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAC,EAAA;QAAAC,MAAA;QAAAC,EAAA;QAAAC,IAAA;QAAAC,EAAA;QAAAC,aAAA;QAAAC,eAAA;AAAAC,QAAAA;AAAA,OAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA;AAAD;AACZ;;;;"}